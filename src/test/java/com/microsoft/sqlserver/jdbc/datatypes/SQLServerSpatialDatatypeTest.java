/*
 * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made
 * available under the terms of the MIT License. See the LICENSE file in the project root for more information.
 */
package com.microsoft.sqlserver.jdbc.datatypes;

import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ParameterMetaData;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;

import com.microsoft.sqlserver.jdbc.Geography;
import com.microsoft.sqlserver.jdbc.Geometry;
import com.microsoft.sqlserver.jdbc.RandomUtil;
import com.microsoft.sqlserver.jdbc.SQLServerException;
import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;
import com.microsoft.sqlserver.jdbc.TestResource;
import com.microsoft.sqlserver.jdbc.TestUtils;
import com.microsoft.sqlserver.testframework.AbstractSQLGenerator;
import com.microsoft.sqlserver.testframework.AbstractTest;
import com.microsoft.sqlserver.testframework.Constants;


/**
 * Test Geometry / Geography classes
 *
 */
@RunWith(JUnitPlatform.class)
public class SQLServerSpatialDatatypeTest extends AbstractTest {

    static String geomTableName;
    static String geogTableName;
    static String spatialDatatypeTableName;
    static boolean isDenaliOrLater = false;

    @Test
    public void testPointWkb() throws SQLException {
        String geoWKT = "POINT(3 40 5 6)";
        byte[] geomWKB = hexStringToByteArray(
                "00000000010F0000000000000840000000000000444000000000000014400000000000001840");
        byte[] geogWKB = hexStringToByteArray(
                "E6100000010F0000000000004440000000000000084000000000000014400000000000001840");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testLineStringWkb() throws SQLException {
        String geoWKT = "LINESTRING(1 0, 0 1, -1 0)";
        byte[] geomWKB = hexStringToByteArray(
                "00000000010403000000000000000000F03F00000000000000000000000000000000000000000000F03F000000000000F0BF000000000000000001000000010000000001000000FFFFFFFF0000000002");
        byte[] geogWKB = hexStringToByteArray(
                "E61000000104030000000000000000000000000000000000F03F000000000000F03F00000000000000000000000000000000000000000000F0BF01000000010000000001000000FFFFFFFF0000000002");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testPolygonWkb() throws SQLException {
        String geoWKT = "POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))";
        byte[] geomWKB = hexStringToByteArray(
                "000000000104090000000000000000000000000000000000000000000000000000000000000000000840000000000000084000000000000008400000000000000840000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F00000000000000400000000000000040000000000000F03F000000000000F03F000000000000F03F020000000200000000000500000001000000FFFFFFFF0000000003");
        byte[] geogWKB = hexStringToByteArray(
                "E61000000200090000000000000000000000000000000000000000000000000008400000000000000000000000000000084000000000000008400000000000000000000000000000084000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F0000000000000040000000000000F03F000000000000F03F020000000100000000010500000001000000FFFFFFFF0000000003");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testMultiPointWkb() throws SQLException {
        String geoWKT = "MULTIPOINT((2 3), (7 8 9.5))";
        byte[] geomWKB = hexStringToByteArray(
                "00000000010502000000000000000000004000000000000008400000000000001C400000000000002040000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001");
        byte[] geogWKB = hexStringToByteArray(
                "E61000000105020000000000000000000840000000000000004000000000000020400000000000001C40000000000000F8FF0000000000002340020000000100000000010100000003000000FFFFFFFF0000000004000000000000000001000000000100000001");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testMultiLineStringWkb() throws SQLException {
        String geoWKT = "MULTILINESTRING((0 2, 1 1), (1 0, 1 1))";
        byte[] geomWKB = hexStringToByteArray(
                "0000000001040400000000000000000000000000000000000040000000000000F03F000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002");
        byte[] geogWKB = hexStringToByteArray(
                "E610000001040400000000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000F03F000000000000F03F000000000000F03F020000000100000000010200000003000000FFFFFFFF0000000005000000000000000002000000000100000002");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testMultiPolygonWkb() throws SQLException {
        String geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";
        byte[] geomWKB = hexStringToByteArray(

        byte[] geogWKB = hexStringToByteArray(

        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testGeometryCollectionWkb() throws SQLException {
        String geoWKT = "GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))";
        byte[] geomWKB = hexStringToByteArray(

        byte[] geogWKB = hexStringToByteArray(

        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testCircularStringWkb() throws SQLException {
        String geoWKT = "CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3)";
        byte[] geomWKB = hexStringToByteArray(
                "000000000207050000000000000000000040000000000000F03F000000000000F03F000000000000004000000000000000000000000000001C40000000000000F03F00000000000000000000000000000040000000000000F03F000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008");
        byte[] geogWKB = hexStringToByteArray(
                "E6100000020705000000000000000000F03F00000000000000400000000000000040000000000000F03F0000000000001C4000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000084000000000000008400000000000000840000000000000084000000000000008400000000000001040000000000000F8FF000000000000F8FF000000000000F8FF000000000000F8FF01000000020000000001000000FFFFFFFF0000000008");
        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testCompoundCurveWkb() throws SQLException {
        String geoWKT = "COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1))";
        byte[] geomWKB = hexStringToByteArray(

        byte[] geogWKB = hexStringToByteArray(

        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testCurvePolygonWkb() throws SQLException {
        String geoWKT = "CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)))";
        byte[] geomWKB = hexStringToByteArray(

        byte[] geogWKB = hexStringToByteArray(

        Geometry geomWKT = Geometry.deserialize(geomWKB);
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geomWKT.asTextZM(), geoWKT);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    public void testFullGlobeWkb() throws SQLException {
        String geoWKT = "FULLGLOBE";
        byte[] geogWKB = hexStringToByteArray("E61000000224000000000000000001000000FFFFFFFFFFFFFFFF0B");
        Geography geogWKT = Geography.deserialize(geogWKB);
        assertEquals(geogWKT.asTextZM(), geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testPointWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "POINT(3 40 5 6)";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "POINT EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testLineStringWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "LINESTRING(1 0, 0 1, -1 0)";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "LINESTRING EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testPolygonWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "POLYGON EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testMultiPointWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "MULTIPOINT((2 3), (7 8 9.5))";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "MULTIPOINT EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testMultiLineStringWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "MULTILINESTRING((0 2, 1 1), (1 0, 1 1))";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "MULTILINESTRING EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testMultiPolygonWkt() throws SQLException {
        beforeEachSetup();
        String geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "MULTIPOLYGON EMPTY";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testGeometryCollectionWkt() throws SQLException {
        String geoWKT;
        if (isDenaliOrLater) {
            beforeEachSetup();
            geoWKT = "GEOMETRYCOLLECTION(POINT(3 3 1), LINESTRING(1 0, 0 1, -1 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2), (0 0 2, 1 10 3, 1 0 4, 0 0 2)), MULTIPOINT((2 3), (7 8 9.5)), MULTILINESTRING((0 2, 1 1), (1 0, 1 1)), MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9))), COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1)), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))";
            testWkt(geoWKT);
        }
        beforeEachSetup();
        geoWKT = "GEOMETRYCOLLECTION EMPTY";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)";
        testWkt(geoWKT);
        beforeEachSetup();
        geoWKT = "GEOMETRYCOLLECTION(POINT(3 3 1), GEOMETRYCOLLECTION EMPTY, MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), EMPTY, EMPTY, ((0 0, 1 1, 2 2, 0 0)), EMPTY), GEOMETRYCOLLECTION EMPTY)";
        testWkt(geoWKT);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testCircularStringWkt() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetup();
            String geoWKT = "CIRCULARSTRING(2 1 3 4, 1 2 3, 0 7 3, 1 0 3, 2 1 3)";
            testWkt(geoWKT);
            beforeEachSetup();
            geoWKT = "CIRCULARSTRING EMPTY";
            testWkt(geoWKT);
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testCompoundCurveWkt() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetup();
            String geoWKT = "COMPOUNDCURVE(CIRCULARSTRING(1 0 3, 0 1 3, 9 6 3, 8 7 3, -1 0 3), CIRCULARSTRING(-1 0 3, 7 9 3, -10 2 3), (-10 2 3, 77 77 77, 88 88 88, 2 6 4), (2 6 4, 3 3 6, 7 7 1))";
            testWkt(geoWKT);
            beforeEachSetup();
            geoWKT = "COMPOUNDCURVE EMPTY";
            testWkt(geoWKT);
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testCurvePolygonWkt() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetup();
            String geoWKT = "CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778)))";
            testWkt(geoWKT);
            beforeEachSetup();
            geoWKT = "CURVEPOLYGON EMPTY";
            testWkt(geoWKT);
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testFullGlobeWkt() throws SQLException {
        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {
            if (isDenaliOrLater) {
                beforeEachSetup();

                String geoWKT = "FULLGLOBE";
                Geography geogWKT = Geography.STGeomFromText(geoWKT, 4326);

                try {
                    Geometry.STGeomFromText(geoWKT, 0);
                } catch (SQLServerException e) {
                    assertEquals(e.getMessage(), "Fullglobe is not supported for Geometry.");
                }

                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                        "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                    pstmt.setGeography(1, geogWKT);
                    pstmt.execute();

                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                            .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                        rs.next();
                        assertEquals(rs.getGeography(1).asTextZM(), geoWKT);
                    }
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testIrregularCases() throws SQLException {
        beforeEachSetup();

        String geoWKT = "  GeOMETRyCOLlECTION(POINT(       3e2  2E1 1  ), GEOMETRYCOLLECTION  EmPTy  , GeometryCollection(GEometryCOLLEction(GEometryCOLLEction Empty)), "
                + "POLYGON(  (0 0 2,   1 10 3, 1 0 4,   0 0 2))  )";
        String geoWKTSS = "GEOMETRYCOLLECTION(POINT(300 20 1), GEOMETRYCOLLECTION EMPTY, GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))";

        testWkt(geoWKT, geoWKTSS);
    }

    @Test
    public void testIllegalCases() throws SQLException {
        // Not enough closing bracket case
        String geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"90"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Not enough closing and opening bracket case
        geoWKT = "MULTIPOLYGON((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"14"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Too many closing bracket
        geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9))))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"91"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Too many opening bracket
        geoWKT = "MULTIPOLYGON((((1 1, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"15"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Too many coordinates
        geoWKT = "MULTIPOLYGON(((1 1 3 4 5, 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"23"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Too little coordinates
        geoWKT = "MULTIPOLYGON(((1 , 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"17"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // Incorrect data type
        geoWKT = "IvnalidPolygon(((1 , 1 2, 2 1, 1 1), (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"14"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // too many commas
        geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1),, (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"35"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }

        // too little commas
        geoWKT = "MULTIPOLYGON(((1 1, 1 2, 2 1, 1 1) (0 0, 0 3, 3 3, 3 0, 0 0 7)), ((9 9, 9 10, 10 9, 9 9)))";

        try {
            testWkt(geoWKT);
        } catch (SQLServerException e) {
            MessageFormat form = new MessageFormat(TestResource.getResource("R_illegalCharWktPosition"));
            Object[] msgArgs1 = {"35"};
            assertEquals(e.getMessage(), form.format(msgArgs1));
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testAllTypes() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetup();

            String geoWKTPoint = "POINT(30 12.12312312 5 6)";
            String geoWKTLineString = "LINESTRING(1 1 0 0, 2 4 3 0, 3 9 123 332)";
            String geoWKTCircularString = "CIRCULARSTRING(1 1, 2 4, 3 9)";
            String geoWKTCompoundCurve = "COMPOUNDCURVE((1 1, 1 3), (1 3, 3 3), (3 3, 3 1), (3 1, 1 1))";
            String geoWKTCurvePolygon = "CURVEPOLYGON(CIRCULARSTRING(2 4, 4 2, 6 4, 4 6, 2 4))";
            String geoWKTPolygon = "POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))";
            String geoWKTMultiPoint = "MULTIPOINT((2 3), (7 8 9.5 4))";
            String geoWKTMultiLineString = "MULTILINESTRING((0 2, 1 1), (1 0, 1 1))";
            String geoWKTMultiPolygon = "MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9)))";
            String geoWKTGeometryCollection = "GEOMETRYCOLLECTION(POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)), POINT(3 3 1 2.5), LINESTRING(1 0, 0 1, -1 0), GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(1 2 3 4))), GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))";

            List<String> geoWKTList = new ArrayList<String>();

            geoWKTList.add(geoWKTPoint);
            geoWKTList.add(geoWKTLineString);
            geoWKTList.add(geoWKTCircularString);
            geoWKTList.add(geoWKTCompoundCurve);
            geoWKTList.add(geoWKTCurvePolygon);
            geoWKTList.add(geoWKTPolygon);
            geoWKTList.add(geoWKTMultiPoint);
            geoWKTList.add(geoWKTMultiLineString);
            geoWKTList.add(geoWKTMultiPolygon);
            geoWKTList.add(geoWKTGeometryCollection);

            Geometry geomWKT;
            Geography geogWKT;

            // Geometry
            try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                        "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)")) {
                    geomWKT = Geometry.STGeomFromText(geoWKTPoint, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTLineString, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCircularString, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCompoundCurve, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCurvePolygon, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTPolygon, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiPoint, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiLineString, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiPolygon, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTGeometryCollection, 0);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.executeUpdate();

                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                            .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                        for (int i = 0; i < geoWKTList.size(); i++) {
                            rs.next();
                            assertEquals(rs.getGeometry(1).asTextZM(), geoWKTList.get(i));
                        }
                    }
                }

                // Geography
                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                        "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)")) {
                    geogWKT = Geography.STGeomFromText(geoWKTPoint, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTLineString, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTCircularString, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTCompoundCurve, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTCurvePolygon, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTPolygon, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTMultiPoint, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTMultiLineString, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTMultiPolygon, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    geogWKT = Geography.STGeomFromText(geoWKTGeometryCollection, 4326);
                    pstmt.setGeography(1, geogWKT);

                    pstmt.executeUpdate();

                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                            .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                        for (int i = 0; i < geoWKTList.size(); i++) {
                            rs.next();
                            assertEquals(rs.getGeography(1).asTextZM(), geoWKTList.get(i));
                        }
                    }
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testMixedAllTypes() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetupSpatialDatatype();

            String geoWKTPoint = "POINT(30 12.12312312 0)";
            String geoWKTLineString = "LINESTRING(1 1, 2 4 3, 3 9 123 332)";
            String geoWKTCircularString = "CIRCULARSTRING(1 1, 2 4, 3 9)";
            String geoWKTCompoundCurve = "COMPOUNDCURVE((1 1, 1 3), (1 3, 3 3), (3 3, 3 1), (3 1, 1 1))";
            String geoWKTCurvePolygon = "CURVEPOLYGON(CIRCULARSTRING(2 4, 4 2, 6 4, 4 6, 2 4))";
            String geoWKTPolygon = "POLYGON((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1))";
            String geoWKTMultiPoint = "MULTIPOINT((2 3), (7 8 9.5))";
            String geoWKTMultiLineString = "MULTILINESTRING((0 2, 1 1), (1 0, 1 1))";
            String geoWKTMultiPolygon = "MULTIPOLYGON(((0 0, 0 3, 3 3, 3 0, 0 0), (1 1, 1 2, 2 1, 1 1)), ((9 9, 9 10, 10 9, 9 9)))";
            String geoWKTGeometryCollection = "GEOMETRYCOLLECTION(POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)), POINT(3 3 1 2.5), LINESTRING(1 0, 0 1, -1 0), GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(POINT(1 2 3 4))), GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY), CURVEPOLYGON((0 0, 0 0, 0 0, 0 0), CIRCULARSTRING(1 3, 3 5, 4 7, 7 3, 1 3), COMPOUNDCURVE((0 -23.43778, 0 23.43778), CIRCULARSTRING(0 23.43778, -45 -23.43778, 0 -23.43778)), COMPOUNDCURVE((0 -23.43778, 7 7, 0 23.43778), CIRCULARSTRING(0 23.43778, 8 8, 8 8, -45 23.43778, -90 23.43778), (-90 23.43778, -90 -23.43778), CIRCULARSTRING(-90 -23.43778, -45 -23.43778, 0 -23.43778))))";

            String s = "some string";
            Double d = 31.34;
            int i2 = 5;

            List<String> geoWKTList = new ArrayList<String>();

            geoWKTList.add(geoWKTPoint);
            geoWKTList.add(geoWKTLineString);
            geoWKTList.add(geoWKTCircularString);
            geoWKTList.add(geoWKTCompoundCurve);
            geoWKTList.add(geoWKTCurvePolygon);
            geoWKTList.add(geoWKTPolygon);
            geoWKTList.add(geoWKTMultiPoint);
            geoWKTList.add(geoWKTMultiLineString);
            geoWKTList.add(geoWKTMultiPolygon);
            geoWKTList.add(geoWKTGeometryCollection);

            Geometry geomWKT;
            Geography geogWKT;

            try (Connection con = getConnection(); Statement stmt = con.createStatement()) {
                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                        "insert into " + AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName)
                                + " values (?, ?, ?, ?, ?)");) {
                    geomWKT = Geometry.STGeomFromText(geoWKTPoint, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTPoint, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTLineString, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTLineString, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCircularString, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTCircularString, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCompoundCurve, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTCompoundCurve, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTCurvePolygon, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTCurvePolygon, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTPolygon, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTPolygon, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiPoint, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTMultiPoint, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiLineString, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTMultiLineString, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTMultiPolygon, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTMultiPolygon, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTGeometryCollection, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTGeometryCollection, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(
                            "select * from " + AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName))) {
                        for (int i = 0; i < geoWKTList.size(); i++) {
                            rs.next();
                            assertEquals(rs.getGeometry(1).asTextZM(), geoWKTList.get(i));
                            assertEquals(rs.getGeography(2).asTextZM(), geoWKTList.get(i));
                            assertEquals(rs.getString(3), s);
                            assertEquals((Double) rs.getDouble(4), d);
                            assertEquals(rs.getInt(5), i2);
                        }
                    }
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testDecimalRounding() throws SQLException {
        beforeEachSetup();

        String geoWKT = "POINT(3 40.7777777777777777777 5 6)";
        String geoWKTSS = "POINT(3 40.77777777777778 5 6)";

        testWkt(geoWKT, geoWKTSS);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testParse() throws SQLException {
        beforeEachSetup();

        String geoWKT = "GEOMETRYCOLLECTION(POINT(300 20 1), GEOMETRYCOLLECTION EMPTY, GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))";

        Geometry geomWKT = Geometry.parse(geoWKT);
        Geography geogWKT = Geography.parse(geoWKT);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setGeometry(1, geomWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                    rs.next();
                    assertEquals(rs.getGeometry(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeometry(1).getSrid(), 0);
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setGeography(1, geogWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                    rs.next();
                    assertEquals(rs.getGeography(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeography(1).getSrid(), 4326);
                }
            }
        }

    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testPoint() throws SQLException {
        beforeEachSetup();

        String geoWKT = "POINT(1 2)";

        Geometry geomWKT = Geometry.point(1, 2, 0);
        Geography geogWKT = Geography.point(2, 1, 4326);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setGeometry(1, geomWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                    rs.next();
                    assertEquals(rs.getGeometry(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeometry(1).getSrid(), 0);
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setGeography(1, geogWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                    rs.next();
                    assertEquals(rs.getGeography(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeography(1).getSrid(), 4326);
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testSetObject() throws SQLException {
        beforeEachSetup();

        String geoWKT = "POINT(1 2)";

        Geometry geomWKT = Geometry.point(1, 2, 0);
        Geography geogWKT = Geography.point(2, 1, 4326);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setObject(1, geomWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                    rs.next();
                    assertEquals(rs.getGeometry(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeometry(1).getSrid(), 0);
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setObject(1, geogWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                    rs.next();
                    assertEquals(rs.getGeography(1).asTextZM(), geoWKT);
                    assertEquals(rs.getGeography(1).getSrid(), 4326);
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testSTAsText() throws SQLException {
        beforeEachSetup();

        String geoWKT = "GEOMETRYCOLLECTION(POINT(300 20 1), GEOMETRYCOLLECTION EMPTY, GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)), POLYGON((0 0 2, 1 10 3, 1 0 4, 0 0 2)))";
        String geoWKTSS = "GEOMETRYCOLLECTION(POINT(300 20), GEOMETRYCOLLECTION EMPTY, GEOMETRYCOLLECTION(GEOMETRYCOLLECTION(GEOMETRYCOLLECTION EMPTY)), POLYGON((0 0, 1 10, 1 0, 0 0)))";

        Geometry geomWKT = Geometry.STGeomFromText(geoWKT, 0);
        Geography geogWKT = Geography.STGeomFromText(geoWKT, 4326);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setGeometry(1, geomWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                    rs.next();
                    assertEquals(rs.getGeometry(1).STAsText(), geoWKTSS);
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setGeography(1, geogWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                    rs.next();
                    assertEquals(rs.getGeography(1).STAsText(), geoWKTSS);
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testSTAsBinary() throws SQLException {
        beforeEachSetup();

        String geoWKT = "POINT(3 40 5 6)";
        String geoWKT2 = "POINT(3 40)";

        Geometry geomWKT = Geometry.STGeomFromText(geoWKT, 0);
        Geography geogWKT = Geography.STGeomFromText(geoWKT, 4326);

        byte[] geomWKB = geomWKT.STAsBinary();
        byte[] geogWKB = geogWKT.STAsBinary();

        Geometry geomWKT2 = Geometry.STGeomFromText(geoWKT2, 0);
        Geography geogWKT2 = Geography.STGeomFromText(geoWKT2, 4326);

        byte[] geomWKB2 = geomWKT2.STAsBinary();
        byte[] geogWKB2 = geogWKT2.STAsBinary();

        assertArrayEquals(geomWKB, geomWKB2);
        assertArrayEquals(geogWKB, geogWKB2);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testCheckGeomMetaData() throws SQLException {
        beforeEachSetup();

        try (Connection con = getConnection(); Statement stmt = con.createStatement();
                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) connection.prepareStatement(
                        "INSERT INTO " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " (c1) VALUES (?)")) {
            ParameterMetaData paramMetaData = pstmt.getParameterMetaData();
            Geometry g = Geometry.STGeomFromText("POINT (1 2 3 4)", 0);
            pstmt.setGeometry(1, g);
            pstmt.execute();

            int sqlType = paramMetaData.getParameterType(1);
            String sqlTypeName = paramMetaData.getParameterTypeName(1);
            assertEquals(sqlType, -157);
            assertEquals(sqlTypeName, "geometry");
            try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                    .executeQuery("select * from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                ResultSetMetaData rsmd = rs.getMetaData();
                assertEquals(rsmd.getColumnType(1), -157);
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testCheckGeogMetaData() throws SQLException {
        beforeEachSetup();

        try (Connection con = getConnection(); Statement stmt = con.createStatement();
                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) connection.prepareStatement(
                        "INSERT INTO " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " (c1) VALUES (?)")) {
            ParameterMetaData paramMetaData = pstmt.getParameterMetaData();
            Geography g = Geography.STGeomFromText("POINT (1 2 3 4)", 4326);
            pstmt.setGeography(1, g);
            pstmt.execute();

            int sqlType = paramMetaData.getParameterType(1);
            String sqlTypeName = paramMetaData.getParameterTypeName(1);
            assertEquals(sqlType, -158);
            assertEquals(sqlTypeName, "geography");
            try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                    .executeQuery("select * from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                ResultSetMetaData rsmd = rs.getMetaData();
                assertEquals(rsmd.getColumnType(1), -158);
            }
        }
    }

    @Test
    public void testGetXGetY() throws SQLException {
        Geometry geom = Geometry.STGeomFromText("POINT (1 2 3 4)", 0);
        Geography geog = Geography.STGeomFromText("POINT (1 2 3 4)", 4326);

        double x = geom.getX();
        double y = geom.getY();
        assertEquals(x, 1);
        assertEquals(y, 2);

        x = geog.getLatitude();
        y = geog.getLongitude();
        assertEquals(x, 2);
        assertEquals(y, 1);
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testNull() throws SQLException {
        if (isDenaliOrLater) {
            beforeEachSetupSpatialDatatype();

            String geoWKTPoint = "POINT(30 12.12312312 NULL 6)";
            String geoWKTLineString = "LINESTRING(1 1 NULL NULL, 2 4 0 42, 3 9 NULL 332)";

            String geoWKTPointExpected = "POINT(30 12.12312312 NULL 6)";
            String geoWKTLineStringExpected = "LINESTRING(1 1, 2 4 0 42, 3 9 NULL 332)";

            String s = "some string";
            Double d = 31.34;
            int i2 = 5;

            List<String> geoWKTList = new ArrayList<String>();

            geoWKTList.add(geoWKTPoint);
            geoWKTList.add(geoWKTLineString);

            List<String> geoWKTListExpected = new ArrayList<String>();

            geoWKTListExpected.add(geoWKTPointExpected);
            geoWKTListExpected.add(geoWKTLineStringExpected);

            Geometry geomWKT;
            Geography geogWKT;

            try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

                try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                        "insert into " + AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName)
                                + " values (?, ?, ?, ?, ?)");) {
                    geomWKT = Geometry.STGeomFromText(geoWKTPoint, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTPoint, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    geomWKT = Geometry.STGeomFromText(geoWKTLineString, 0);
                    geogWKT = Geography.STGeomFromText(geoWKTLineString, 4326);
                    pstmt.setGeometry(1, geomWKT);
                    pstmt.setGeography(2, geogWKT);
                    pstmt.setString(3, s);
                    pstmt.setDouble(4, d);
                    pstmt.setInt(5, i2);

                    pstmt.executeUpdate();

                    try (SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(
                            "select * from " + AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName))) {
                        for (int i = 0; i < geoWKTList.size(); i++) {
                            rs.next();
                            assertEquals(rs.getGeometry(1).asTextZM(), geoWKTListExpected.get(i));
                            assertEquals(rs.getGeography(2).asTextZM(), geoWKTListExpected.get(i));
                            assertEquals(rs.getString(3), s);
                            assertEquals((Double) rs.getDouble(4), d);
                            assertEquals(rs.getInt(5), i2);
                        }
                    }
                }
            }
        }
    }

    @Test
    @Tag(Constants.xAzureSQLDW)
    public void testWrongtype() throws SQLException {
        beforeEachSetup();

        Geometry geomWKT = Geometry.point(1, 2, 0);
        Geography geogWKT = Geography.point(2, 1, 4326);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setGeometry(1, geomWKT);
                pstmt.execute();

                try {
                    SQLServerResultSet rs = (SQLServerResultSet) stmt
                            .executeQuery("select * from " + AbstractSQLGenerator.escapeIdentifier(geomTableName));
                    rs.next();
                    rs.getGeography(1); // should fail
                    fail();
                } catch (SQLServerException e) {
                    assertEquals(e.getMessage(), "The conversion from GEOMETRY to GEOGRAPHY is unsupported.");
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setGeography(1, geogWKT);
                pstmt.execute();

                try {
                    SQLServerResultSet rs = (SQLServerResultSet) stmt
                            .executeQuery("select * from " + AbstractSQLGenerator.escapeIdentifier(geogTableName));
                    rs.next();
                    rs.getGeometry(1); // should fail
                    fail();
                } catch (SQLServerException e) {
                    assertEquals(e.getMessage(), "The conversion from GEOGRAPHY to GEOMETRY is unsupported.");
                }
            }
        }
    }

    private void beforeEachSetup() throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(geomTableName), stmt);
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(geogTableName), stmt);
            stmt.executeUpdate(
                    "Create table " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " (c1 geometry)");
            stmt.executeUpdate(
                    "Create table " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " (c1 geography)");
        }
    }

    private void beforeEachSetupSpatialDatatype() throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName), stmt);
            stmt.executeUpdate("Create table " + AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName)
                    + " (c1 geometry," + "c2 geography," + "c3 nvarchar(512)," + "c4 decimal(28,4)," + "c5 int)");
        }
    }

    private void testWkt(String geoWKT) throws SQLException {
        testWkt(geoWKT, geoWKT);
    }

    private void testWkt(String geoWKT, String geoWKTSS) throws SQLException {
        Geometry geomWKT = Geometry.STGeomFromText(geoWKT, 0);
        Geography geogWKT = Geography.STGeomFromText(geoWKT, 4326);

        try (Connection con = getConnection(); Statement stmt = con.createStatement()) {

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geomTableName) + " values (?)");) {
                pstmt.setGeometry(1, geomWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geomTableName))) {
                    rs.next();
                    assertEquals(rs.getGeometry(1).asTextZM(), geoWKTSS);
                }
            }

            try (SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) con.prepareStatement(
                    "insert into " + AbstractSQLGenerator.escapeIdentifier(geogTableName) + " values (?)");) {
                pstmt.setGeography(1, geogWKT);
                pstmt.execute();

                try (SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select c1 from " + AbstractSQLGenerator.escapeIdentifier(geogTableName))) {
                    rs.next();
                    assertEquals(rs.getGeography(1).asTextZM(), geoWKTSS);
                }
            }
        }
    }

    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
        }

        return data;
    }

    /**
     * Prepare test
     * 
     * @throws SQLException
     * @throws SecurityException
     * @throws IOException
     */
    @BeforeAll
    public static void setupHere() throws SQLException, SecurityException, IOException {
        geomTableName = RandomUtil.getIdentifier("geometryTestTable");
        geogTableName = RandomUtil.getIdentifier("geographyTestTable");
        spatialDatatypeTableName = RandomUtil.getIdentifier("spatialDatatypeTestTable");

        try (Connection con = getConnection(); Statement stmt = con.createStatement();
                SQLServerResultSet rs = (SQLServerResultSet) stmt
                        .executeQuery("select SERVERPROPERTY ( 'ProductVersion' )")) {
            rs.next();
            int version = Integer.parseInt(rs.getString(1).substring(0, 2));

            // if major version is greater than or equal to 11, it's SQL Server 2012 or above.
            if (version >= 11) {
                isDenaliOrLater = true;
            }
        }
    }

    /**
     * drop the tables
     * 
     * @throws SQLException
     */
    @AfterAll
    public static void afterAll() throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(geomTableName), stmt);
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(geogTableName), stmt);
            TestUtils.dropTableIfExists(AbstractSQLGenerator.escapeIdentifier(spatialDatatypeTableName), stmt);
        }
    }
}
